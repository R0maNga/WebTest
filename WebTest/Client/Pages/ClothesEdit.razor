@page "/for-clothes"
@page "/for-clothes/{id:guid}"
@using AutoMapper
@using DAL.Repositories.Interfaces
@using DAL.Models.ForClothes.Response
@using DAL.Models.ForClothes.Request
@inject IMapper _mapper
@inject IClothesRepository IClothesRepository
@inject NavigationManager NavigationManager

@if (Id == null)
{
    <PageTitle>
        Create a new Clothes
    </PageTitle>
}
else
{
    <PageTitle>Edit @clothes.Name</PageTitle>
    <h3>Edit @clothes.Name</h3>
}


<EditForm Model="clothes" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" required @bind-Value="clothes.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="quantity">quantity</label>
        <InputNumber id="quantity" min="0" @bind-Value="clothes.DefaultQuantity" class="form-control"></InputNumber>
    </div>

    <br/>
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#modal">Delete UWU Clothes </button>


</EditForm>


<div class="modal fade" data-backdrop="false" id="modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">

    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal Confirm</h5>
                <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Wanna delete cupboard?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-danger" @onclick="DeleteCupboard">Delete Cupboard </button>
            </div>
        </div>
    </div>
</div>
<div>
</div>

@code {

    [Parameter]
    public Guid? Id { get; set; }

    string btnText = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Add new Clothes" : "Update Clothes";

        await IClothesRepository.GetAsync();
    }


    GetClothesById clothes = new();

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
        }
        else
        {
            clothes = await IClothesRepository.GetByIdAsync((Guid)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await IClothesRepository.Create(_mapper.Map<CreateClothes>(clothes));
            NavigationManager.NavigateTo("/clothes");
        }
        else
        {
            await IClothesRepository.Update(_mapper.Map<UpdateClothes>(clothes));
            NavigationManager.NavigateTo("/clothes");
        }
    }

    async Task DeleteCupboard()
    {
        await IClothesRepository.Delete(_mapper.Map<DeleteClothes>(clothes));
        NavigationManager.NavigateTo("/clothes");
    }

}